// +build ignore

// This program generates gf.go. It can be invoked by running go generate.
package main

import (
	"log"
	"os"
	"text/template"
	"time"
)

const primitivePolynomial = 0x1100B
const size uint32 = 65536

func main() {
	var b uint32 = 1

	gflog := make([]uint16, size)
	gfilog := make([]uint16, size)
	for log := uint32(0); log < size; log++ {
		gflog[b] = uint16(log)
		gfilog[log] = uint16(b)
		b = b << 1
		if (b & size) != 0 {
			b ^= primitivePolynomial
		}
	}

	f, err := os.Create("tables.go")
	if err != nil {
		log.Fatalf("could not create gf.go: %v", err)
	}
	packageTemplate.Execute(f, struct {
		Timestamp time.Time
		Gflogs    []uint16
		Gfilogs   []uint16
	}{
		Timestamp: time.Now(),
		Gflogs:    gflog,
		Gfilogs:   gfilog,
	})
}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}
package gf

var Gflog = [...]uint16{
{{- range .Gflogs }}
	{{ printf "%d" . }},
{{- end }}
}

var Gfilog = [...]uint16{
{{- range .Gfilogs }}
	{{ printf "%d" . }},
{{- end }}
}
`))
